/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request, Response } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { FileInterceptor } from "@nestjs/platform-express";
import { ImageDataService } from "../imageData.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ImageDataCreateInput } from "./ImageDataCreateInput";
import { ImageData } from "./ImageData";
import { ImageDataFindManyArgs } from "./ImageDataFindManyArgs";
import { ImageDataWhereUniqueInput } from "./ImageDataWhereUniqueInput";
import { ImageDataUpdateInput } from "./ImageDataUpdateInput";
import { DetectionResultFindManyArgs } from "../../detectionResult/base/DetectionResultFindManyArgs";
import { DetectionResult } from "../../detectionResult/base/DetectionResult";
import { DetectionResultWhereUniqueInput } from "../../detectionResult/base/DetectionResultWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ImageDataControllerBase {
  constructor(
    protected readonly service: ImageDataService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ImageData })
  @nestAccessControl.UseRoles({
    resource: "ImageData",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createImageData(
    @common.Body() data: ImageDataCreateInput
  ): Promise<ImageData> {
    return await this.service.createImageData({
      data: data,
      select: {
        createdAt: true,
        filePath: true,
        id: true,
        updatedAt: true,
        uploadedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [ImageData] })
  @ApiNestedQuery(ImageDataFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ImageData",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async imageDataItems(@common.Req() request: Request): Promise<ImageData[]> {
    const args = plainToClass(ImageDataFindManyArgs, request.query);
    return this.service.imageDataItems({
      ...args,
      select: {
        createdAt: true,
        filePath: true,
        id: true,
        updatedAt: true,
        uploadedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ImageData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ImageData",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async imageData(
    @common.Param() params: ImageDataWhereUniqueInput
  ): Promise<ImageData | null> {
    const result = await this.service.imageData({
      where: params,
      select: {
        createdAt: true,
        filePath: true,
        id: true,
        updatedAt: true,
        uploadedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ImageData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ImageData",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateImageData(
    @common.Param() params: ImageDataWhereUniqueInput,
    @common.Body() data: ImageDataUpdateInput
  ): Promise<ImageData | null> {
    try {
      return await this.service.updateImageData({
        where: params,
        data: data,
        select: {
          createdAt: true,
          filePath: true,
          id: true,
          updatedAt: true,
          uploadedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ImageData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ImageData",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteImageData(
    @common.Param() params: ImageDataWhereUniqueInput
  ): Promise<ImageData | null> {
    try {
      return await this.service.deleteImageData({
        where: params,
        select: {
          createdAt: true,
          filePath: true,
          id: true,
          updatedAt: true,
          uploadedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Put(":id/filePath")
  @common.UseInterceptors(FileInterceptor("file"))
  @swagger.ApiConsumes("multipart/form-data")
  @swagger.ApiBody({
    schema: {
      type: "object",

      properties: {
        file: {
          type: "string",
          format: "binary",
        },
      },
    },
  })
  @swagger.ApiParam({
    name: "id",
    type: "string",
    required: true,
  })
  @swagger.ApiCreatedResponse({
    type: ImageData,
    status: "2XX",
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async uploadFilePath(
    @common.Param()
    params: ImageDataWhereUniqueInput,
    @common.UploadedFile()
    file: Express.Multer.File
  ): Promise<ImageData> {
    return this.service.uploadFilePath(
      {
        where: params,
      },
      Object.assign(file, {
        filename: file.originalname,
      })
    );
  }

  @common.Get(":id/filePath")
  @swagger.ApiParam({
    name: "id",
    type: "string",
    required: true,
  })
  @swagger.ApiOkResponse({
    type: common.StreamableFile,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async downloadFilePath(
    @common.Param()
    params: ImageDataWhereUniqueInput,
    @common.Res({
      passthrough: true,
    })
    res: Response
  ): Promise<common.StreamableFile> {
    const result = await this.service.downloadFilePath({
      where: params,
    });

    if (result === null) {
      throw new errors.NotFoundException(
        "No resource was found for ",
        JSON.stringify(params)
      );
    }

    res.setHeader(
      "Content-Disposition",
      `attachment; filename=${result.filename}`
    );
    res.setHeader("Content-Type", result.mimetype);
    return result.stream;
  }

  @common.Delete(":id/filePath")
  @swagger.ApiOkResponse({
    type: ImageData,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async deleteFilePath(
    @common.Param()
    params: ImageDataWhereUniqueInput
  ): Promise<ImageData> {
    return this.service.deleteFilePath({
      where: params,
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/detectionResults")
  @ApiNestedQuery(DetectionResultFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "DetectionResult",
    action: "read",
    possession: "any",
  })
  async findDetectionResults(
    @common.Req() request: Request,
    @common.Param() params: ImageDataWhereUniqueInput
  ): Promise<DetectionResult[]> {
    const query = plainToClass(DetectionResultFindManyArgs, request.query);
    const results = await this.service.findDetectionResults(params.id, {
      ...query,
      select: {
        createdAt: true,
        detectionScore: true,
        id: true,

        imageData: {
          select: {
            id: true,
          },
        },

        isTumorDetected: true,

        modelMetadata: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/detectionResults")
  @nestAccessControl.UseRoles({
    resource: "ImageData",
    action: "update",
    possession: "any",
  })
  async connectDetectionResults(
    @common.Param() params: ImageDataWhereUniqueInput,
    @common.Body() body: DetectionResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      detectionResults: {
        connect: body,
      },
    };
    await this.service.updateImageData({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/detectionResults")
  @nestAccessControl.UseRoles({
    resource: "ImageData",
    action: "update",
    possession: "any",
  })
  async updateDetectionResults(
    @common.Param() params: ImageDataWhereUniqueInput,
    @common.Body() body: DetectionResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      detectionResults: {
        set: body,
      },
    };
    await this.service.updateImageData({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/detectionResults")
  @nestAccessControl.UseRoles({
    resource: "ImageData",
    action: "update",
    possession: "any",
  })
  async disconnectDetectionResults(
    @common.Param() params: ImageDataWhereUniqueInput,
    @common.Body() body: DetectionResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      detectionResults: {
        disconnect: body,
      },
    };
    await this.service.updateImageData({
      where: params,
      data,
      select: { id: true },
    });
  }
}
