/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ImageData as PrismaImageData,
  DetectionResult as PrismaDetectionResult,
} from "@prisma/client";

import { LocalStorageService } from "src/storage/providers/local/local.storage.service";
import { InputJsonValue } from "src/types";
import { FileDownload, FileUpload } from "src/storage/base/storage.types";
import { LocalStorageFile } from "src/storage/providers/local/local.storage.types";

export class ImageDataServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly localStorageService: LocalStorageService
  ) {}

  async count(
    args: Omit<Prisma.ImageDataCountArgs, "select">
  ): Promise<number> {
    return this.prisma.imageData.count(args);
  }

  async imageDataItems<T extends Prisma.ImageDataFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ImageDataFindManyArgs>
  ): Promise<PrismaImageData[]> {
    return this.prisma.imageData.findMany<Prisma.ImageDataFindManyArgs>(args);
  }
  async imageData<T extends Prisma.ImageDataFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ImageDataFindUniqueArgs>
  ): Promise<PrismaImageData | null> {
    return this.prisma.imageData.findUnique(args);
  }
  async createImageData<T extends Prisma.ImageDataCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ImageDataCreateArgs>
  ): Promise<PrismaImageData> {
    return this.prisma.imageData.create<T>(args);
  }
  async updateImageData<T extends Prisma.ImageDataUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ImageDataUpdateArgs>
  ): Promise<PrismaImageData> {
    return this.prisma.imageData.update<T>(args);
  }
  async deleteImageData<T extends Prisma.ImageDataDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ImageDataDeleteArgs>
  ): Promise<PrismaImageData> {
    return this.prisma.imageData.delete(args);
  }

  async uploadFilePath<T extends Prisma.ImageDataFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ImageDataFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaImageData> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "filePath";
    const filePath = await this.localStorageService.uploadFile(
      file,
      [],
      1000000,
      containerPath
    );

    return await this.prisma.imageData.update({
      where: args.where,

      data: {
        filePath: filePath as InputJsonValue,
      },
    });
  }

  async downloadFilePath<T extends Prisma.ImageDataFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ImageDataFindUniqueArgs>
  ): Promise<FileDownload> {
    const { filePath } = await this.prisma.imageData.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      filePath as unknown as LocalStorageFile
    );
  }

  async deleteFilePath<T extends Prisma.ImageDataFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ImageDataFindUniqueArgs>
  ): Promise<PrismaImageData> {
    const { filePath } = await this.prisma.imageData.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      filePath as unknown as LocalStorageFile
    );

    return await this.prisma.imageData.update({
      where: args.where,

      data: {
        filePath: Prisma.DbNull,
      },
    });
  }

  async findDetectionResults(
    parentId: string,
    args: Prisma.DetectionResultFindManyArgs
  ): Promise<PrismaDetectionResult[]> {
    return this.prisma.imageData
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .detectionResults(args);
  }
}
