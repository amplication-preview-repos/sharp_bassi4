/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ModelMetadata } from "./ModelMetadata";
import { ModelMetadataCountArgs } from "./ModelMetadataCountArgs";
import { ModelMetadataFindManyArgs } from "./ModelMetadataFindManyArgs";
import { ModelMetadataFindUniqueArgs } from "./ModelMetadataFindUniqueArgs";
import { CreateModelMetadataArgs } from "./CreateModelMetadataArgs";
import { UpdateModelMetadataArgs } from "./UpdateModelMetadataArgs";
import { DeleteModelMetadataArgs } from "./DeleteModelMetadataArgs";
import { DetectionResultFindManyArgs } from "../../detectionResult/base/DetectionResultFindManyArgs";
import { DetectionResult } from "../../detectionResult/base/DetectionResult";
import { ModelMetadataService } from "../modelMetadata.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ModelMetadata)
export class ModelMetadataResolverBase {
  constructor(
    protected readonly service: ModelMetadataService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ModelMetadata",
    action: "read",
    possession: "any",
  })
  async _modelMetadataItemsMeta(
    @graphql.Args() args: ModelMetadataCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ModelMetadata])
  @nestAccessControl.UseRoles({
    resource: "ModelMetadata",
    action: "read",
    possession: "any",
  })
  async modelMetadataItems(
    @graphql.Args() args: ModelMetadataFindManyArgs
  ): Promise<ModelMetadata[]> {
    return this.service.modelMetadataItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ModelMetadata, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ModelMetadata",
    action: "read",
    possession: "own",
  })
  async modelMetadata(
    @graphql.Args() args: ModelMetadataFindUniqueArgs
  ): Promise<ModelMetadata | null> {
    const result = await this.service.modelMetadata(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ModelMetadata)
  @nestAccessControl.UseRoles({
    resource: "ModelMetadata",
    action: "create",
    possession: "any",
  })
  async createModelMetadata(
    @graphql.Args() args: CreateModelMetadataArgs
  ): Promise<ModelMetadata> {
    return await this.service.createModelMetadata({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ModelMetadata)
  @nestAccessControl.UseRoles({
    resource: "ModelMetadata",
    action: "update",
    possession: "any",
  })
  async updateModelMetadata(
    @graphql.Args() args: UpdateModelMetadataArgs
  ): Promise<ModelMetadata | null> {
    try {
      return await this.service.updateModelMetadata({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ModelMetadata)
  @nestAccessControl.UseRoles({
    resource: "ModelMetadata",
    action: "delete",
    possession: "any",
  })
  async deleteModelMetadata(
    @graphql.Args() args: DeleteModelMetadataArgs
  ): Promise<ModelMetadata | null> {
    try {
      return await this.service.deleteModelMetadata(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [DetectionResult], { name: "detectionResults" })
  @nestAccessControl.UseRoles({
    resource: "DetectionResult",
    action: "read",
    possession: "any",
  })
  async findDetectionResults(
    @graphql.Parent() parent: ModelMetadata,
    @graphql.Args() args: DetectionResultFindManyArgs
  ): Promise<DetectionResult[]> {
    const results = await this.service.findDetectionResults(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
