/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ModelMetadataService } from "../modelMetadata.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ModelMetadataCreateInput } from "./ModelMetadataCreateInput";
import { ModelMetadata } from "./ModelMetadata";
import { ModelMetadataFindManyArgs } from "./ModelMetadataFindManyArgs";
import { ModelMetadataWhereUniqueInput } from "./ModelMetadataWhereUniqueInput";
import { ModelMetadataUpdateInput } from "./ModelMetadataUpdateInput";
import { DetectionResultFindManyArgs } from "../../detectionResult/base/DetectionResultFindManyArgs";
import { DetectionResult } from "../../detectionResult/base/DetectionResult";
import { DetectionResultWhereUniqueInput } from "../../detectionResult/base/DetectionResultWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ModelMetadataControllerBase {
  constructor(
    protected readonly service: ModelMetadataService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ModelMetadata })
  @nestAccessControl.UseRoles({
    resource: "ModelMetadata",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createModelMetadata(
    @common.Body() data: ModelMetadataCreateInput
  ): Promise<ModelMetadata> {
    return await this.service.createModelMetadata({
      data: data,
      select: {
        createdAt: true,
        id: true,
        parameters: true,
        trainedAt: true,
        updatedAt: true,
        version: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [ModelMetadata] })
  @ApiNestedQuery(ModelMetadataFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ModelMetadata",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async modelMetadataItems(
    @common.Req() request: Request
  ): Promise<ModelMetadata[]> {
    const args = plainToClass(ModelMetadataFindManyArgs, request.query);
    return this.service.modelMetadataItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        parameters: true,
        trainedAt: true,
        updatedAt: true,
        version: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ModelMetadata })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ModelMetadata",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async modelMetadata(
    @common.Param() params: ModelMetadataWhereUniqueInput
  ): Promise<ModelMetadata | null> {
    const result = await this.service.modelMetadata({
      where: params,
      select: {
        createdAt: true,
        id: true,
        parameters: true,
        trainedAt: true,
        updatedAt: true,
        version: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ModelMetadata })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ModelMetadata",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateModelMetadata(
    @common.Param() params: ModelMetadataWhereUniqueInput,
    @common.Body() data: ModelMetadataUpdateInput
  ): Promise<ModelMetadata | null> {
    try {
      return await this.service.updateModelMetadata({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          parameters: true,
          trainedAt: true,
          updatedAt: true,
          version: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ModelMetadata })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ModelMetadata",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteModelMetadata(
    @common.Param() params: ModelMetadataWhereUniqueInput
  ): Promise<ModelMetadata | null> {
    try {
      return await this.service.deleteModelMetadata({
        where: params,
        select: {
          createdAt: true,
          id: true,
          parameters: true,
          trainedAt: true,
          updatedAt: true,
          version: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/detectionResults")
  @ApiNestedQuery(DetectionResultFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "DetectionResult",
    action: "read",
    possession: "any",
  })
  async findDetectionResults(
    @common.Req() request: Request,
    @common.Param() params: ModelMetadataWhereUniqueInput
  ): Promise<DetectionResult[]> {
    const query = plainToClass(DetectionResultFindManyArgs, request.query);
    const results = await this.service.findDetectionResults(params.id, {
      ...query,
      select: {
        createdAt: true,
        detectionScore: true,
        id: true,

        imageData: {
          select: {
            id: true,
          },
        },

        isTumorDetected: true,

        modelMetadata: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/detectionResults")
  @nestAccessControl.UseRoles({
    resource: "ModelMetadata",
    action: "update",
    possession: "any",
  })
  async connectDetectionResults(
    @common.Param() params: ModelMetadataWhereUniqueInput,
    @common.Body() body: DetectionResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      detectionResults: {
        connect: body,
      },
    };
    await this.service.updateModelMetadata({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/detectionResults")
  @nestAccessControl.UseRoles({
    resource: "ModelMetadata",
    action: "update",
    possession: "any",
  })
  async updateDetectionResults(
    @common.Param() params: ModelMetadataWhereUniqueInput,
    @common.Body() body: DetectionResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      detectionResults: {
        set: body,
      },
    };
    await this.service.updateModelMetadata({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/detectionResults")
  @nestAccessControl.UseRoles({
    resource: "ModelMetadata",
    action: "update",
    possession: "any",
  })
  async disconnectDetectionResults(
    @common.Param() params: ModelMetadataWhereUniqueInput,
    @common.Body() body: DetectionResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      detectionResults: {
        disconnect: body,
      },
    };
    await this.service.updateModelMetadata({
      where: params,
      data,
      select: { id: true },
    });
  }
}
