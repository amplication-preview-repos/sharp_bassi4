/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ModelMetadata as PrismaModelMetadata,
  DetectionResult as PrismaDetectionResult,
} from "@prisma/client";

export class ModelMetadataServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ModelMetadataCountArgs, "select">
  ): Promise<number> {
    return this.prisma.modelMetadata.count(args);
  }

  async modelMetadataItems<T extends Prisma.ModelMetadataFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ModelMetadataFindManyArgs>
  ): Promise<PrismaModelMetadata[]> {
    return this.prisma.modelMetadata.findMany<Prisma.ModelMetadataFindManyArgs>(
      args
    );
  }
  async modelMetadata<T extends Prisma.ModelMetadataFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ModelMetadataFindUniqueArgs>
  ): Promise<PrismaModelMetadata | null> {
    return this.prisma.modelMetadata.findUnique(args);
  }
  async createModelMetadata<T extends Prisma.ModelMetadataCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ModelMetadataCreateArgs>
  ): Promise<PrismaModelMetadata> {
    return this.prisma.modelMetadata.create<T>(args);
  }
  async updateModelMetadata<T extends Prisma.ModelMetadataUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ModelMetadataUpdateArgs>
  ): Promise<PrismaModelMetadata> {
    return this.prisma.modelMetadata.update<T>(args);
  }
  async deleteModelMetadata<T extends Prisma.ModelMetadataDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ModelMetadataDeleteArgs>
  ): Promise<PrismaModelMetadata> {
    return this.prisma.modelMetadata.delete(args);
  }

  async findDetectionResults(
    parentId: string,
    args: Prisma.DetectionResultFindManyArgs
  ): Promise<PrismaDetectionResult[]> {
    return this.prisma.modelMetadata
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .detectionResults(args);
  }
}
