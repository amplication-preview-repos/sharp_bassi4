/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DetectionResult as PrismaDetectionResult,
  ImageData as PrismaImageData,
  ModelMetadata as PrismaModelMetadata,
} from "@prisma/client";

export class DetectionResultServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DetectionResultCountArgs, "select">
  ): Promise<number> {
    return this.prisma.detectionResult.count(args);
  }

  async detectionResults<T extends Prisma.DetectionResultFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DetectionResultFindManyArgs>
  ): Promise<PrismaDetectionResult[]> {
    return this.prisma.detectionResult.findMany<Prisma.DetectionResultFindManyArgs>(
      args
    );
  }
  async detectionResult<T extends Prisma.DetectionResultFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DetectionResultFindUniqueArgs>
  ): Promise<PrismaDetectionResult | null> {
    return this.prisma.detectionResult.findUnique(args);
  }
  async createDetectionResult<T extends Prisma.DetectionResultCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DetectionResultCreateArgs>
  ): Promise<PrismaDetectionResult> {
    return this.prisma.detectionResult.create<T>(args);
  }
  async updateDetectionResult<T extends Prisma.DetectionResultUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DetectionResultUpdateArgs>
  ): Promise<PrismaDetectionResult> {
    return this.prisma.detectionResult.update<T>(args);
  }
  async deleteDetectionResult<T extends Prisma.DetectionResultDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DetectionResultDeleteArgs>
  ): Promise<PrismaDetectionResult> {
    return this.prisma.detectionResult.delete(args);
  }

  async getImageData(parentId: string): Promise<PrismaImageData | null> {
    return this.prisma.detectionResult
      .findUnique({
        where: { id: parentId },
      })
      .imageData();
  }

  async getModelMetadata(
    parentId: string
  ): Promise<PrismaModelMetadata | null> {
    return this.prisma.detectionResult
      .findUnique({
        where: { id: parentId },
      })
      .modelMetadata();
  }
}
