/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { DetectionResult } from "./DetectionResult";
import { DetectionResultCountArgs } from "./DetectionResultCountArgs";
import { DetectionResultFindManyArgs } from "./DetectionResultFindManyArgs";
import { DetectionResultFindUniqueArgs } from "./DetectionResultFindUniqueArgs";
import { CreateDetectionResultArgs } from "./CreateDetectionResultArgs";
import { UpdateDetectionResultArgs } from "./UpdateDetectionResultArgs";
import { DeleteDetectionResultArgs } from "./DeleteDetectionResultArgs";
import { ImageData } from "../../imageData/base/ImageData";
import { ModelMetadata } from "../../modelMetadata/base/ModelMetadata";
import { DetectionResultService } from "../detectionResult.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DetectionResult)
export class DetectionResultResolverBase {
  constructor(
    protected readonly service: DetectionResultService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DetectionResult",
    action: "read",
    possession: "any",
  })
  async _detectionResultsMeta(
    @graphql.Args() args: DetectionResultCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DetectionResult])
  @nestAccessControl.UseRoles({
    resource: "DetectionResult",
    action: "read",
    possession: "any",
  })
  async detectionResults(
    @graphql.Args() args: DetectionResultFindManyArgs
  ): Promise<DetectionResult[]> {
    return this.service.detectionResults(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DetectionResult, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DetectionResult",
    action: "read",
    possession: "own",
  })
  async detectionResult(
    @graphql.Args() args: DetectionResultFindUniqueArgs
  ): Promise<DetectionResult | null> {
    const result = await this.service.detectionResult(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DetectionResult)
  @nestAccessControl.UseRoles({
    resource: "DetectionResult",
    action: "create",
    possession: "any",
  })
  async createDetectionResult(
    @graphql.Args() args: CreateDetectionResultArgs
  ): Promise<DetectionResult> {
    return await this.service.createDetectionResult({
      ...args,
      data: {
        ...args.data,

        imageData: args.data.imageData
          ? {
              connect: args.data.imageData,
            }
          : undefined,

        modelMetadata: args.data.modelMetadata
          ? {
              connect: args.data.modelMetadata,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DetectionResult)
  @nestAccessControl.UseRoles({
    resource: "DetectionResult",
    action: "update",
    possession: "any",
  })
  async updateDetectionResult(
    @graphql.Args() args: UpdateDetectionResultArgs
  ): Promise<DetectionResult | null> {
    try {
      return await this.service.updateDetectionResult({
        ...args,
        data: {
          ...args.data,

          imageData: args.data.imageData
            ? {
                connect: args.data.imageData,
              }
            : undefined,

          modelMetadata: args.data.modelMetadata
            ? {
                connect: args.data.modelMetadata,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DetectionResult)
  @nestAccessControl.UseRoles({
    resource: "DetectionResult",
    action: "delete",
    possession: "any",
  })
  async deleteDetectionResult(
    @graphql.Args() args: DeleteDetectionResultArgs
  ): Promise<DetectionResult | null> {
    try {
      return await this.service.deleteDetectionResult(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ImageData, {
    nullable: true,
    name: "imageData",
  })
  @nestAccessControl.UseRoles({
    resource: "ImageData",
    action: "read",
    possession: "any",
  })
  async getImageData(
    @graphql.Parent() parent: DetectionResult
  ): Promise<ImageData | null> {
    const result = await this.service.getImageData(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ModelMetadata, {
    nullable: true,
    name: "modelMetadata",
  })
  @nestAccessControl.UseRoles({
    resource: "ModelMetadata",
    action: "read",
    possession: "any",
  })
  async getModelMetadata(
    @graphql.Parent() parent: DetectionResult
  ): Promise<ModelMetadata | null> {
    const result = await this.service.getModelMetadata(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
